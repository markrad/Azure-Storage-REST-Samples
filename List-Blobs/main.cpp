/* ----------------------------------------------------------------------------- *
 * This Sample Code is provided for  the purpose of illustration only and is not * 
 * intended  to be used in a production  environment.  THIS SAMPLE  CODE AND ANY * 
 * RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER * 
 * EXPRESSED OR IMPLIED, INCLUDING  BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF * 
 * MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.                      * 
 * ----------------------------------------------------------------------------- */

 // Sample demonstrates calling the Azure REST API to list the blobs in a container.
#include <cstdio>
#include <curl/curl.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "AzureStorageAuthenticationHelper.h"

struct MemoryStruct {
  char *memory;
  size_t size;
};
 
// Curl callback function. Called for each block of data received from web server 
static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp)
{
	size_t realsize = size * nmemb;
	struct MemoryStruct *mem = (struct MemoryStruct *)userp;
 
	mem->memory = (char *) realloc(mem->memory, mem->size + realsize + 1);
  
	if(mem->memory == NULL) {
		/* out of memory! */ 
		printf("not enough memory (realloc returned NULL)\n");
		return 0;
	}
 
	memcpy(&(mem->memory[mem->size]), contents, realsize);
	mem->size += realsize;
	mem->memory[mem->size] = 0;
#ifdef DEBUG
	printf("Stored %d bytes\r\n", (int)realsize);
#endif

	return realsize;
}
 
int main()
{
	const char *target = "https://%s.blob.core.windows.net/?%s";
    const char *storageAccountName = "<Storage account name here>";
	const char *storageAccountkey = "<Storage account key here>";
    const char *request = "comp=list";
	CURL *curl;
	CURLcode res;
	struct curl_slist *list = NULL;
	struct MemoryStruct chunk;
	time_t rawtime;
	struct tm *timeinfo;
	char work[100];
	char auth[200];
    char *headers[3];
	const char *version = "x-ms-version:2017-04-17";

	printf("StorageSamples starting\n");
 
	chunk.memory = (char *) malloc(1);  	/* will be grown as needed by the realloc above */ 
	chunk.size = 0;    						/* no data at this point */ 
	
	time(&rawtime);
	timeinfo = gmtime(&rawtime);
	
#ifdef DEBUG
	// Rounds up the time to the next ten minutes - can be useful if one wants to compare
	// a SAS token generated by another piece of code to this one
    timeinfo->tm_min += 10 - (timeinfo->tm_min % 10);
    timeinfo->tm_sec = 0;
#endif
	strftime(work, sizeof(work) * sizeof(work[0]), "x-ms-date:%a, %d %b %Y %T GMT", timeinfo);

	curl = curl_easy_init();

	if (curl)
	{
		// Add the headers
		headers[0] = strdup(work);
        headers[1] = strdup(version);
		
		// Generate the authorization header and add that too
        int res = AzureStorageAuthenticationHelper::GetAuthorizationHeader(
            auth, sizeof(auth), storageAccountName, storageAccountkey, "GET", (const char **)headers, sizeof(headers) / sizeof(headers[0]) - 1, request);
        headers[2] = strdup(auth);
        
        // Send headers to curl
		for (int i = 0; i < sizeof(headers) / sizeof(headers[0]); i++)
        {
#ifdef DEBUG			
            printf("header %d: %s\r\n", i, headers[i]);
#endif			
            list = curl_slist_append(list, headers[i]);
        }

		// Build the URL
        sprintf(work, target, storageAccountName, request);
        printf("target=%s\r\n", work);
		
		// Set up the curl options
		curl_easy_setopt(curl, CURLOPT_URL, work);
		curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
		curl_easy_setopt(curl, CURLOPT_HTTPHEADER, list);

		/* send all data to this function  */ 
		curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);
 
		/* we pass our 'chunk' struct to the callback function */ 
		curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&chunk);
        
#ifdef DEBUG		
        /* Turn on verbose cURL output */
        curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);
#endif		
 
		CURLcode cc = curl_easy_perform(curl);

		if (cc != CURLE_OK)
		{
			printf("curl_easy_perform failed with %s\r\n", curl_easy_strerror(cc));
		}
	}
	else
	{
		printf("Failed to initialize curl\r\n");
	}
	
	printf("Response: \r\n");
	
	for (int i = 0; i < chunk.size; i++)
	{
		putchar(chunk.memory[i]);
	}
	
	printf("\r\n");

    return 0;
}